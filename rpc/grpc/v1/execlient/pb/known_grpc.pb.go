// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v2.2.0
// - protoc             v3.20.2
// source: known.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v2.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KnownClient is the client API for Known service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KnownClient interface {
	Sqrt(ctx context.Context, in *SqrtReq, opts ...grpc.CallOption) (*SqrtRes, error)
	KnowFrom(ctx context.Context, in *KnowFromReq, opts ...grpc.CallOption) (*KnowFromRes, error)
}

type knownClient struct {
	cc grpc.ClientConnInterface
}

func NewKnownClient(cc grpc.ClientConnInterface) KnownClient {
	return &knownClient{cc}
}

func (c *knownClient) Sqrt(ctx context.Context, in *SqrtReq, opts ...grpc.CallOption) (*SqrtRes, error) {
	out := new(SqrtRes)
	err := c.cc.Invoke(ctx, "/Known/Sqrt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knownClient) KnowFrom(ctx context.Context, in *KnowFromReq, opts ...grpc.CallOption) (*KnowFromRes, error) {
	out := new(KnowFromRes)
	err := c.cc.Invoke(ctx, "/Known/KnowFrom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KnownServer is the server API for Known service.
// All implementations must embed UnimplementedKnownServer
// for forward compatibility
type KnownServer interface {
	Sqrt(context.Context, *SqrtReq) (*SqrtRes, error)
	KnowFrom(context.Context, *KnowFromReq) (*KnowFromRes, error)
	mustEmbedUnimplementedKnownServer()
}

// UnimplementedKnownServer must be embedded to have forward compatible implementations.
type UnimplementedKnownServer struct {
}

func (UnimplementedKnownServer) Sqrt(context.Context, *SqrtReq) (*SqrtRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sqrt not implemented")
}
func (UnimplementedKnownServer) KnowFrom(context.Context, *KnowFromReq) (*KnowFromRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KnowFrom not implemented")
}
func (UnimplementedKnownServer) mustEmbedUnimplementedKnownServer() {}

// UnsafeKnownServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KnownServer will
// result in compilation errors.
type UnsafeKnownServer interface {
	mustEmbedUnimplementedKnownServer()
}

func RegisterKnownServer(s grpc.ServiceRegistrar, srv KnownServer) {
	s.RegisterService(&Known_ServiceDesc, srv)
}

func _Known_Sqrt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqrtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnownServer).Sqrt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Known/Sqrt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnownServer).Sqrt(ctx, req.(*SqrtReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Known_KnowFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KnowFromReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnownServer).KnowFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Known/KnowFrom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnownServer).KnowFrom(ctx, req.(*KnowFromReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Known_ServiceDesc is the grpc.ServiceDesc for Known service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Known_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Known",
	HandlerType: (*KnownServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sqrt",
			Handler:    _Known_Sqrt_Handler,
		},
		{
			MethodName: "KnowFrom",
			Handler:    _Known_KnowFrom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "known.proto",
}
